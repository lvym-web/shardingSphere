# shardingjdbc分片策略
# 配置数据源，给数据源起名称
spring.shardingsphere.datasource.names=ds0

#配置数据源具体内容，包含连接池，驱动，地址，用户名和密码
spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.url=jdbc:mysql://192.168.146.120:3306/user_db?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=123456

#指定course表分布情况，配置表在哪个数据库里面，表名称都是什么  ds0.course_1 , ds0.course_2
spring.shardingsphere.sharding.tables.user.actual-data-nodes=ds0.t_user

# 指定t_user表里面主键uid 生成策略  SNOWFLAKE
spring.shardingsphere.sharding.tables.user.key-generator.column=uid
spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE
# 指定表分片策略
spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column=uid
spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression=t_user

# 指定数据库分片策略 约定user_id是偶数添加m1，是奇数添加m2
#所有数据库默认
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{user_id % 2}
#根据表

# 一个实体类对应两张表，覆盖
spring.main.allow-bean-definition-overriding=true

# 打开sql输出日志
spring.shardingsphere.properties.sql.show=true
#


